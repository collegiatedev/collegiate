// do we account for discounts here?
model Match {
    id Int @id @default(autoincrement())

    orgId String? // TODO; clerk org id

    familyId Int
    Family   Family @relation(fields: [familyId], references: [id])

    contract String? // TODO; docusign contract url

    packageId Int
    Package   Package @relation(fields: [packageId], references: [id])

    // add projects; figure out the consumable patterns

    discounts    Discount[]
    installments Installment[]

    team   Team? @relation()
    teamId Int   @unique
}

model Team {
    id      Int      @id @default(autoincrement())
    mentors Mentor[] @relation("MentorTeam")

    match   Match @relation(fields: [matchId], references: [id])
    matchId Int   @unique
}

model Discount {
    id   Int    @id @default(autoincrement())
    name String

    amount     Decimal? // or percentage
    percentage Int? // or amount

    matches Match[]
}

model Installment {
    id        Int      @id @default(autoincrement())
    completed Boolean  @default(false)
    amount    Decimal
    due       DateTime

    matchId Int
    Match   Match @relation(fields: [matchId], references: [id])
}

model Client {
    id        Int     @id @default(autoincrement()) // TODO; use clerk id
    isStudent Boolean // student or parent

    firstName String
    lastName  String

    email String? @unique
    phone String? @unique

    familyId Int
    Family   Family @relation(fields: [familyId], references: [id])
}

model Family {
    id      Int      @id @default(autoincrement())
    clients Client[]
    matches Match[]
}

// need to somehow modle for installments, discounts, etc
// want to keep this modulized as well
model Package {
    id    Int      @id @default(autoincrement())
    name  String
    price Decimal? // TODO; stripe price

    counselorMeetings Int @default(0)

    mentorMeetings Int @default(0)
    mentors        Int @default(0)

    essayId Int?
    Essay   Essay? @relation(fields: [essayId], references: [id])

    // assume 1 cohort per package for now
    cohortId Int?
    Cohort   Cohort? @relation(fields: [cohortId], references: [id])

    matches Match[]
}

model Essay {
    id   Int     @id @default(autoincrement())
    name String?

    personalBrand Boolean?
    standardApps  Int?     @default(0)
    premiumApps   Int?     @default(0)
    drafts        Int?     @default(0) // essay microservice

    packages Package[]

    @@unique([personalBrand, standardApps, premiumApps, drafts])
}

model Cohort {
    id Int @id @default(autoincrement())

    quantity          Int @default(0)
    meetingsPerCohort Int @default(0)

    packages Package[]

    @@unique([quantity, meetingsPerCohort])
}

model Mentor {
    id       Int    @id @default(autoincrement())
    workerId Int
    worker   Worker @relation(fields: [workerId], references: [id])
    role     Roles

    teams Team[] @relation("MentorTeam") // adjust this to prevent duplicates later

    @@unique([workerId, role])
}

enum Roles {
    ADMIN
    COUNSELOR
    EDITOR
    PROJECT_MANAGER
    APP_MANAGER
    INTERNSHIP
}

model Worker {
    id        Int    @id @default(autoincrement()) // TODO; use clerk id
    firstName String
    lastName  String

    bio String

    discord String?
    email   String?
    phone   String?

    mentors Mentor[]
}

// model Meeting {
//     id        Int      @id @default(autoincrement())
//     match     Match    @relation(fields: [matchId], references: [id])
//     matchId   Int
//     notes     String
//     date      DateTime // TODO; double check this

//     mentor    Mentor   @relation(fields: [mentorId], references: [id])
//     mentorId  Int

//     attendees Client[] @relation("MeetingClient")
//     Worker    Worker?  @relation(fields: [workerId], references: [id])
//     workerId  Int?
// }
