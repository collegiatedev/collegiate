model Match {
  id Int @id @default(autoincrement())
  // orgId String? // TODO; clerk org id

  teamId Int
  Team   Team @relation(fields: [teamId], references: [id])

  familyId Int
  Family   Family @relation(fields: [familyId], references: [id])

  contracts Contract[]
  packageId Int?
  Package   Package?   @relation(fields: [packageId], references: [id])

  @@unique([familyId, teamId])
}

model Family {
  id      Int      @id @default(autoincrement())
  clients Client[]
  matches Match[]
}

model Client {
  id Int @id @default(autoincrement()) // TODO; use clerk id

  isStudent Boolean // student or parent

  userId Int
  User   User @relation(fields: [userId], references: [id])

  familyId Int
  Family   Family @relation(fields: [familyId], references: [id])
}

model Team {
  id      Int      @id @default(autoincrement())
  mentors Mentor[] @relation("MentorTeam")
  matches Match[]
}

model Mentor {
  id Int @id @default(autoincrement())

  role Roles

  workerId Int
  worker   Worker @relation(fields: [workerId], references: [id])

  teams Team[] @relation("MentorTeam")

  @@unique([workerId, role])
}

model Worker {
  id     Int  @id @default(autoincrement()) // TODO; use clerk id
  userId Int
  User   User @relation(fields: [userId], references: [id])

  bio         String
  discord     String?
  headshotUrl String? // TODO; uploadthing

  mentors Mentor[]
}

// editor, pm, internship, will require their own tables later
// contractor based
enum Roles {
  ADMIN
  COUNSELOR
  EDITOR
  PROJECT_MANAGER
  APP_MANAGER
  INTERNSHIP
}

model User {
  id Int @id @default(autoincrement()) // TODO; use clerk id

  firstName String
  lastName  String

  email String? @unique
  phone String? @unique

  timezone Timezones

  Worker Worker[]
  Client Client[]
}

enum Timezones {
  PT // Pacific Time
  CT // Central Time
  ET // Eastern Time
  // Add more when necessary
}

// model Meeting {
//     id        Int      @id @default(autoincrement())
//     match     Match    @relation(fields: [matchId], references: [id])
//     matchId   Int
//     notes     String
//     date      DateTime // TODO; double check this

//     mentor    Mentor   @relation(fields: [mentorId], references: [id])
//     mentorId  Int

//     attendees Client[] @relation("MeetingClient")
//     Worker    Worker?  @relation(fields: [workerId], references: [id])
//     workerId  Int?
// }
